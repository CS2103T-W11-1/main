@startuml
!include ../style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AlgoBaseParser" as AlgoBaseParser LOGIC_COLOR
participant "addTaskCommand:AddTaskCommand" as AddTaskCommand LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "<<Class>>\n:Plan" as PlanClass MODEL_COLOR
participant "updatedPlan:Plan" as PlanObject MODEL_COLOR
participant ":Model" as Model MODEL_COLOR
participant ":AlgoBase" as AlgoBase MODEL_COLOR
participant ":PlanList" as PlanList MODEL_COLOR
end box

[-> LogicManager : execute(addTask)
activate LogicManager

LogicManager -> AlgoBaseParser : parseCommand(addTask)
activate AlgoBaseParser

create AddTaskCommand
AlgoBaseParser -> AddTaskCommand
activate AddTaskCommand

AddTaskCommand --> AlgoBaseParser
deactivate AddTaskCommand

AlgoBaseParser --> LogicManager : addTaskCommand
deactivate AlgoBaseParser

LogicManager -> AddTaskCommand : execute()
activate AddTaskCommand

AddTaskCommand -> PlanClass : updateTasks(originPlan, tasks)
activate PlanClass

create PlanObject
PlanClass -> PlanObject
activate PlanObject

PlanObject --> PlanClass
deactivate PlanObject

PlanClass --> AddTaskCommand : updatedPlan
deactivate PlanClass

AddTaskCommand -> Model : setPlan(originPlan, updatedPlan)
activate Model

Model -> AlgoBase : setPlan(originPlan, updatedPlan)
activate AlgoBase

AlgoBase -> PlanList : setPlan(originPlan, updatedPlan)
activate PlanList

PlanList --> AlgoBase
deactivate PlanList

AlgoBase --> Model
deactivate AlgoBase

Model --> AddTaskCommand
deactivate Model

AddTaskCommand --> LogicManager : result
deactivate AddTaskCommand
AddTaskCommand -[hidden]-> LogicManager : result
destroy AddTaskCommand

[<--LogicManager
deactivate LogicManager
@enduml
